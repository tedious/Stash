<?php

/*
 * This file is part of the Stash package.
 *
 * (c) Robert Hafner <tedivm@tedivm.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Stash\Driver;

use Stash;

/**
 * The APCu driver is a wrapper for the APCu extension, which allows developers to store data in memory.
 *
 * Based on original APC driver
 *
 * @author  Mate Skoblar <m.ateskobla.r@gmail.com>
 */
class Apcu extends AbstractDriver
{
    /**
     * Default maximum time an Item will be stored.
     *
     * @var int
     */
    protected $ttl;

    /**
     * This is an install specific namespace used to segment different applications from interacting with each other
     * when using APC. It's generated by creating an md5 of this file's location.
     *
     * @var string
     */
    protected $apcuNamespace;

    /**
     * The number of records \APCIterator will grab at once.
     *
     * @var int
     */
    protected $chunkSize = 100;

    /**
     * {@inheritdoc}
     */
    public function getDefaultOptions()
    {
        return array(
            'ttl' => 300,
            'namespace' => md5(__FILE__),
        );
    }

    /**
     * This function returns iterator based on PECL version. As of version 5 APCUIterator is used.
     *
     * @param $search
     * @param $format
     * @param $chunk_size
     *
     * @return \APCIterator|\APCUIterator
     */
    private function getIterator($search, $format, $chunk_size)
    {
        return class_exists('\APCUIterator') ?
            new \APCUIterator($search, $format, $chunk_size) :
            new \APCIterator('user', $search, $format, $chunk_size);
    }

    /**
     * This function should takes an array which is used to pass option values to the driver.
     *
     * * ttl - This is the maximum time the item will be stored.
     * * namespace - This should be used when multiple projects may use the same library.
     *
     * @param array $options
     */
    public function setOptions(array $options = array())
    {
        $options += $this->getDefaultOptions();

        $this->ttl = (int) $options['ttl'];
        $this->apcuNamespace = $options['namespace'];
    }

    /**
     * {@inheritdoc}
     */
    public function getData($key)
    {
        $keyString = self::makeKey($key);
        $success = null;
        $data = apcu_fetch($keyString, $success);

        return $success ? $data : false;
    }

    /**
     * {@inheritdoc}
     */
    public function storeData($key, $data, $expiration)
    {
        $life = $this->getCacheTime($expiration);

        return apcu_store($this->makeKey($key), array('data' => $data, 'expiration' => $expiration), $life);
    }

    /**
     * {@inheritdoc}
     */
    public function clear($key = null)
    {
        if (!isset($key)) {
            return apcu_clear_cache();
        } else {
            $keyRegex = '['.$this->makeKey($key).'*]';
            $chunkSize = isset($this->chunkSize) && is_numeric($this->chunkSize) ? $this->chunkSize : 100;

            do {
                $emptyIterator = true;
                $it = $this->getIterator($keyRegex, \APC_ITER_KEY, $chunkSize);
                foreach ($it as $item) {
                    $emptyIterator = false;
                    apcu_delete($item['key']);
                }
            } while (!$emptyIterator);
        }

        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function purge()
    {
        $now = time();
        $keyRegex = '['.$this->makeKey(array()).'*]';
        $chunkSize = isset($this->chunkSize) && is_numeric($this->chunkSize) ? $this->chunkSize : 100;

        $it = $this->getIterator($keyRegex, \APC_ITER_KEY, $chunkSize);
        foreach ($it as $item) {
            $success = null;
            $data = apcu_fetch($item['key'], $success);

            if ($success && is_array($data) && $data['expiration'] <= $now) {
                apcu_delete($item['key']);
            }
        }

        return true;
    }

    /**
     * This driver is available if the apc extension is present and loaded on the system.
     *
     * @return bool
     */
    public static function isAvailable()
    {
        // as of version 5 there is APCUIterator, else APCIterator.
        if (!class_exists('\APCUIterator') && !class_exists('\APCIterator')) {
            return false;
        }

        return (extension_loaded('apcu') && ini_get('apc.enabled'))
            && ((php_sapi_name() !== 'cli') || ini_get('apc.enable_cli'));
    }

    /**
     * Turns a key array into a string.
     *
     * @param array $key
     *
     * @return string
     */
    protected function makeKey($key)
    {
        $keyString = md5(__FILE__).'::'; // make it unique per install

        if (isset($this->apcuNamespace)) {
            $keyString .= $this->apcuNamespace.'::';
        }

        foreach ($key as $piece) {
            $keyString .= $piece.'::';
        }

        return $keyString;
    }

    /**
     * Converts a timestamp into a TTL.
     *
     * @param int $expiration
     *
     * @return int
     */
    protected function getCacheTime($expiration)
    {
        $life = $expiration - time();

        return $this->ttl < $life ? $this->ttl : $life;
    }
}
